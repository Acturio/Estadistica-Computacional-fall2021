#+TITLE: SQL
#+AUTHOR: Miguel Angel Escalante Serrato
#+EMAIL:  miguel.escalante@itam.mx
#+DATE: 9-Nov-21
#+LANGUAGE:  es
#+OPTIONS: num:nil toc:nil
#+REVEAL_THEME: moon
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_TRANS: cube
#+REVEAL_SLIDE_NUMBER: t
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Estadística Computacional">
#+PROPERTY: header-args:sql :engine postgres :dbhost 0.0.0.0 :port 5432 :dbuser postgres :dbpassword postgres :database postgres
* Intro
SQL (al parecer se le llama sequel) significa en su base: **Structured Query Language**
* Basics Query Language
** Select
Select nos ayuda a filtrar las columnas que vamos a pedir de nuestra base de datos
*** Una Columna
#+begin_src sql
  select  year from flights limit 5;
#+end_src

#+RESULTS:
| year |
|------|
| 2013 |
| 2013 |
| 2013 |
| 2013 |
| 2013 |

***  Varias columnas
#+begin_src sql
select year, month from flights limit 5;
#+end_src

#+RESULTS:
| year | month |
|------+-------|
| 2013 |     1 |
| 2013 |     1 |
| 2013 |     1 |
| 2013 |     1 |
| 2013 |     1 |

*** renombrar variables
#+begin_src sql
select year as agno, month as mes, day as dia from flights limit 10;
#+end_src

#+RESULTS:
| agno | mes | dia |
|------+-----+-----|
| 2013 |   1 |   1 |
| 2013 |   1 |   1 |
| 2013 |   1 |   1 |
| 2013 |   1 |   1 |
| 2013 |   1 |   1 |
| 2013 |   1 |   1 |
| 2013 |   1 |   1 |
| 2013 |   1 |   1 |
| 2013 |   1 |   1 |
| 2013 |   1 |   1 |

*** Seleccionar todas las variables
#+begin_src sql
select * from flights limit 5;
#+end_src

#+RESULTS:
| year | month | day | dep_time | sched_dep_time | dep_delay | arr_time | sched_arr_time | arr_delay | carrier | flight | tailnum | origin | dest | air_time | distance | hour | minute | time_hour              |
|------+-------+-----+----------+----------------+-----------+----------+----------------+-----------+---------+--------+---------+--------+------+----------+----------+------+--------+------------------------|
| 2013 |     1 |   1 |      517 |            515 |         2 |      830 |            819 |        11 | UA      |   1545 | N14228  | EWR    | IAH  |      227 |     1400 |    5 |     15 | 2013-01-01 05:00:00+00 |
| 2013 |     1 |   1 |      533 |            529 |         4 |      850 |            830 |        20 | UA      |   1714 | N24211  | LGA    | IAH  |      227 |     1416 |    5 |     29 | 2013-01-01 05:00:00+00 |
| 2013 |     1 |   1 |      542 |            540 |         2 |      923 |            850 |        33 | AA      |   1141 | N619AA  | JFK    | MIA  |      160 |     1089 |    5 |     40 | 2013-01-01 05:00:00+00 |
| 2013 |     1 |   1 |      544 |            545 |        -1 |     1004 |           1022 |       -18 | B6      |    725 | N804JB  | JFK    | BQN  |      183 |     1576 |    5 |     45 | 2013-01-01 05:00:00+00 |
| 2013 |     1 |   1 |      554 |            600 |        -6 |      812 |            837 |       -25 | DL      |    461 | N668DN  | LGA    | ATL  |      116 |      762 |    6 |      0 | 2013-01-01 06:00:00+00 |

** where
Where es el verbo que nos ayuda a filtrar renglones dentro del lenguaje:
#+begin_src sql
  select month, day from flights
   where month = 12 limit 10;
#+end_src

#+RESULTS:
| month | day |
|-------+-----|
|    12 |   1 |
|    12 |   1 |
|    12 |   1 |
|    12 |   1 |
|    12 |   1 |
|    12 |   1 |
|    12 |   1 |
|    12 |   1 |
|    12 |   1 |
|    12 |   1 |

#+begin_src sql
  select month, day from flights
   where month = 12 and day=12 limit 10;
#+end_src

#+RESULTS:
| month | day |
|-------+-----|
|    12 |  12 |
|    12 |  12 |
|    12 |  12 |
|    12 |  12 |
|    12 |  12 |
|    12 |  12 |
|    12 |  12 |
|    12 |  12 |
|    12 |  12 |
|    12 |  12 |

** Count
Nos ayuda a contar los renglones que tenemos
#+begin_src sql
  select count(*) from flights;
#+end_src

#+RESULTS:
|  count |
|--------|
| 336776 |

** distinct
Nos ayuda a encontrar los valores únicos en las tablas.
#+begin_src sql
  select distinct month from flights;
#+end_src
** Subqueries
#+RESULTS:
| month |
|-------|
|    12 |
|     3 |
|    11 |
|     8 |
|    10 |
|     9 |
|     7 |
|     1 |
|     5 |
|     4 |
|     2 |
|     6 |
#+begin_src sql
select count(*) from (select distinct month, day from flights) md;
#+end_src

#+RESULTS:
| count |
|-------|
|   365 |

** CTE's

Common Table expressions es una especie de tabla temporal que construímos para hacer más sencillo el query que necesitemos hacer.
#+begin_src sql
  with md as (select distinct month, day from flights),
    mdy as (select distinct year, month, day from flights)
  Select mdy.year from mdy limit 10;
#+end_src

#+RESULTS:
| year |
|------|
| 2013 |
| 2013 |
| 2013 |
| 2013 |
| 2013 |
| 2013 |
| 2013 |
| 2013 |
| 2013 |
| 2013 |

** Order by
Ordena los resultados dada alguna regla establecida.
#+begin_src sql
select distinct month from flights order by month;
#+end_src

#+RESULTS:
| month |
|-------|
|     1 |
|     2 |
|     3 |
|     4 |
|     5 |
|     6 |
|     7 |
|     8 |
|     9 |
|    10 |
|    11 |
|    12 |

**


** concat
Nos ayuda a juntar varias columnas en una sola.
#+begin_src sql
select concat(month,'-',day,'-',year) from flights limit 10;
#+end_src

#+RESULTS:
|     concat |
|------------|
| 2013-01-01 |
| 2013-01-01 |
| 2013-01-01 |
| 2013-01-01 |
| 2013-01-01 |
| 2013-01-01 |
| 2013-01-01 |
| 2013-01-01 |
| 2013-01-01 |
| 2013-01-01 |

** Parseo

Nos ayuda a castear algún tipo en otro tipo, para mayor referencia de los tipos de datos en pg [[https://www.postgresql.org/docs/current/datatype.html][ver acá]].
#+begin_src sql
  select concat(month,'-',day,'-',year)::date from flights limit 10;
#+end_src

#+RESULTS:
|     concat |
|------------|
| 2013-01-01 |
| 2013-01-01 |
| 2013-01-01 |
| 2013-01-01 |
| 2013-01-01 |
| 2013-01-01 |
| 2013-01-01 |
| 2013-01-01 |
| 2013-01-01 |
| 2013-01-01 |

** split
#+begin_src sql
  with tabla as (select concat(month,'-',day,'-',year) as fecha from flights)
      select split_part(fecha,'-',3) as lol  from tabla limit 10;
#+end_src

#+RESULTS:
|  lol |
|------|
| 2013 |
| 2013 |
| 2013 |
| 2013 |
| 2013 |
| 2013 |
| 2013 |
| 2013 |
| 2013 |
| 2013 |
